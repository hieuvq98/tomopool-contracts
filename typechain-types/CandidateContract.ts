/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface CandidateContractInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "BLOCK_PER_EPOCH"
      | "CandidateName"
      | "CapBeforeResign"
      | "EpochsAtWhichCapChange"
      | "EpochsReward"
      | "ListStaker"
      | "NUM_EPOCH_UNDER60k_TO_RESIGN"
      | "PENDING_STATUS"
      | "PROPOSED_STATUS"
      | "RESIGNED_STATUS"
      | "RemainingStakeAfterResign"
      | "StakeExchange"
      | "StakerRewardWithdrawState"
      | "StakersCapacity"
      | "StakersTotalReward"
      | "TotalRewardEpochFilled"
      | "TotalRewardWithdrawn"
      | "buyStake"
      | "canResign"
      | "candidateStatus"
      | "candidateWithdrawDelay"
      | "capacity"
      | "capacityChanges"
      | "capacityHistory"
      | "coinbaseAddr"
      | "communityVote"
      | "computeStakerRewardByEpoch"
      | "computeTotalStakerReward"
      | "confirmTeam"
      | "currentEpoch"
      | "fillRewardsPerEpoch"
      | "getCapacityByEpoch"
      | "getCurrentStakerCap"
      | "getHardwareFee"
      | "getHardwareFeePercentage"
      | "getLastWithdrawEpochOfStaker"
      | "getListStaker"
      | "getRefBonus"
      | "getRefBonusPercentage"
      | "getReferralAddress"
      | "getRewardByEpoch"
      | "getStakeExchange"
      | "getStakerCapacityByEpoch"
      | "getStakerCurrentReward"
      | "getStakerTotalReward"
      | "getWithdrawBlockNumbers"
      | "getWithdrawCap"
      | "governance"
      | "hardwareFeePercentage"
      | "indexes"
      | "isAlreadyWithdrawAfterResign"
      | "isCandidateLockWithdraw"
      | "isRequireReferralLock"
      | "isStakeLockWithdrawn"
      | "isVoted"
      | "isWithdrawAfterResignAvailable"
      | "isWithdrawn"
      | "lastEpochRewardFilled"
      | "maxCap"
      | "propose"
      | "referralAddress"
      | "referralPercentage"
      | "requireLockAmount"
      | "resign"
      | "resignByTeam"
      | "saveCapacityHistory"
      | "setHardwareFeePercentage"
      | "setLastWithdrawEpochOfStaker"
      | "setMaxCap"
      | "setRefBonusPercentage"
      | "setReferralAddress"
      | "setRequireLockAmount"
      | "setRequireReferralLock"
      | "setSellStake"
      | "setTeam"
      | "setWithdrawDelay"
      | "stake"
      | "stakerWithdrawDelay"
      | "teamAddr"
      | "teamAddress"
      | "transferStake"
      | "unstake"
      | "validator"
      | "withdrawAfterResign"
      | "withdrawAllRewardsOfStaker"
      | "withdrawIndex"
      | "withdrawRewardStakerOneEpoch"
      | "withdrawRewardStakerOneHundredEpoch"
      | "withdrawStake"
      | "withdrawStakeByAnyOne"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "BuyStake"
      | "CommunityVote"
      | "PaymentHardware"
      | "PaymentRef"
      | "Propose"
      | "Resign"
      | "SaveCapacityByEpoch"
      | "SetSellStake"
      | "Stake"
      | "TradingFee"
      | "TransferStake"
      | "UnStake"
      | "Withdraw"
      | "WithdrawAfterResign"
      | "WithdrawReward"
      | "WithdrawRewardPerEpoch"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "BLOCK_PER_EPOCH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CandidateName",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CapBeforeResign",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "EpochsAtWhichCapChange",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "EpochsReward",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "ListStaker",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "NUM_EPOCH_UNDER60k_TO_RESIGN",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PENDING_STATUS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PROPOSED_STATUS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "RESIGNED_STATUS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "RemainingStakeAfterResign",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "StakeExchange",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "StakerRewardWithdrawState",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "StakersCapacity",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "StakersTotalReward",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "TotalRewardEpochFilled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TotalRewardWithdrawn",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "buyStake",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "canResign", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "candidateStatus",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "candidateWithdrawDelay",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "capacity", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "capacityChanges",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "capacityHistory",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "coinbaseAddr",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "communityVote",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "computeStakerRewardByEpoch",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "computeTotalStakerReward",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "confirmTeam",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentEpoch",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fillRewardsPerEpoch",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCapacityByEpoch",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentStakerCap",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getHardwareFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getHardwareFeePercentage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLastWithdrawEpochOfStaker",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getListStaker",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRefBonus",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRefBonusPercentage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getReferralAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRewardByEpoch",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getStakeExchange",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getStakerCapacityByEpoch",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getStakerCurrentReward",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getStakerTotalReward",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getWithdrawBlockNumbers",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getWithdrawCap",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "governance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "hardwareFeePercentage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "indexes",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isAlreadyWithdrawAfterResign",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "isCandidateLockWithdraw",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isRequireReferralLock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isStakeLockWithdrawn",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isVoted",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isWithdrawAfterResignAvailable",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "isWithdrawn",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lastEpochRewardFilled",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "maxCap", values?: undefined): string;
  encodeFunctionData(functionFragment: "propose", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "referralAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "referralPercentage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requireLockAmount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "resign", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "resignByTeam",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "saveCapacityHistory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setHardwareFeePercentage",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setLastWithdrawEpochOfStaker",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxCap",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setRefBonusPercentage",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setReferralAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setRequireLockAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setRequireReferralLock",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setSellStake",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTeam",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setWithdrawDelay",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "stake", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "stakerWithdrawDelay",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "teamAddr", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "teamAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferStake",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "unstake",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "validator", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawAfterResign",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawAllRewardsOfStaker",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawIndex",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawRewardStakerOneEpoch",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawRewardStakerOneHundredEpoch",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawStake",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawStakeByAnyOne",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "BLOCK_PER_EPOCH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CandidateName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CapBeforeResign",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "EpochsAtWhichCapChange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "EpochsReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ListStaker", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "NUM_EPOCH_UNDER60k_TO_RESIGN",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PENDING_STATUS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PROPOSED_STATUS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "RESIGNED_STATUS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "RemainingStakeAfterResign",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "StakeExchange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "StakerRewardWithdrawState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "StakersCapacity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "StakersTotalReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TotalRewardEpochFilled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TotalRewardWithdrawn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "buyStake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "canResign", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "candidateStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "candidateWithdrawDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "capacity", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "capacityChanges",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "capacityHistory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "coinbaseAddr",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "communityVote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "computeStakerRewardByEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "computeTotalStakerReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "confirmTeam",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fillRewardsPerEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCapacityByEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentStakerCap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getHardwareFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getHardwareFeePercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLastWithdrawEpochOfStaker",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getListStaker",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRefBonus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRefBonusPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReferralAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRewardByEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStakeExchange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStakerCapacityByEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStakerCurrentReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStakerTotalReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWithdrawBlockNumbers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWithdrawCap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "governance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "hardwareFeePercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "indexes", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isAlreadyWithdrawAfterResign",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isCandidateLockWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isRequireReferralLock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isStakeLockWithdrawn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isVoted", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isWithdrawAfterResignAvailable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isWithdrawn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastEpochRewardFilled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "maxCap", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "propose", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "referralAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "referralPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requireLockAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "resign", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "resignByTeam",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "saveCapacityHistory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setHardwareFeePercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLastWithdrawEpochOfStaker",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setMaxCap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setRefBonusPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setReferralAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRequireLockAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRequireReferralLock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSellStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setTeam", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setWithdrawDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stakerWithdrawDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "teamAddr", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "teamAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unstake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "validator", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAfterResign",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAllRewardsOfStaker",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawRewardStakerOneEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawRewardStakerOneHundredEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawStakeByAnyOne",
    data: BytesLike
  ): Result;
}

export namespace BuyStakeEvent {
  export type InputTuple = [
    _buyer: AddressLike,
    _amountNormalTomo: BigNumberish,
    _seller: AddressLike,
    _amountStakeTomo: BigNumberish,
    _price: BigNumberish
  ];
  export type OutputTuple = [
    _buyer: string,
    _amountNormalTomo: bigint,
    _seller: string,
    _amountStakeTomo: bigint,
    _price: bigint
  ];
  export interface OutputObject {
    _buyer: string;
    _amountNormalTomo: bigint;
    _seller: string;
    _amountStakeTomo: bigint;
    _price: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CommunityVoteEvent {
  export type InputTuple = [
    _staker: AddressLike,
    _code: BigNumberish,
    _des: string,
    _cap: BigNumberish,
    _support: boolean
  ];
  export type OutputTuple = [
    _staker: string,
    _code: bigint,
    _des: string,
    _cap: bigint,
    _support: boolean
  ];
  export interface OutputObject {
    _staker: string;
    _code: bigint;
    _des: string;
    _cap: bigint;
    _support: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PaymentHardwareEvent {
  export type InputTuple = [
    _epoch: BigNumberish,
    _hardwareFeePercentage: BigNumberish,
    _amount: BigNumberish
  ];
  export type OutputTuple = [
    _epoch: bigint,
    _hardwareFeePercentage: bigint,
    _amount: bigint
  ];
  export interface OutputObject {
    _epoch: bigint;
    _hardwareFeePercentage: bigint;
    _amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PaymentRefEvent {
  export type InputTuple = [
    _epoch: BigNumberish,
    _refPercentage: BigNumberish,
    _amount: BigNumberish
  ];
  export type OutputTuple = [
    _epoch: bigint,
    _refPercentage: bigint,
    _amount: bigint
  ];
  export interface OutputObject {
    _epoch: bigint;
    _refPercentage: bigint;
    _amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProposeEvent {
  export type InputTuple = [_candidate: AddressLike];
  export type OutputTuple = [_candidate: string];
  export interface OutputObject {
    _candidate: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ResignEvent {
  export type InputTuple = [_candidate: AddressLike];
  export type OutputTuple = [_candidate: string];
  export interface OutputObject {
    _candidate: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SaveCapacityByEpochEvent {
  export type InputTuple = [
    _epoch: BigNumberish,
    _totalStaker: BigNumberish,
    _capacity: BigNumberish
  ];
  export type OutputTuple = [
    _epoch: bigint,
    _totalStaker: bigint,
    _capacity: bigint
  ];
  export interface OutputObject {
    _epoch: bigint;
    _totalStaker: bigint;
    _capacity: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetSellStakeEvent {
  export type InputTuple = [
    _staker: AddressLike,
    _saleAmount: BigNumberish,
    _salePrice: BigNumberish
  ];
  export type OutputTuple = [
    _staker: string,
    _saleAmount: bigint,
    _salePrice: bigint
  ];
  export interface OutputObject {
    _staker: string;
    _saleAmount: bigint;
    _salePrice: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StakeEvent {
  export type InputTuple = [_staker: AddressLike, _amount: BigNumberish];
  export type OutputTuple = [_staker: string, _amount: bigint];
  export interface OutputObject {
    _staker: string;
    _amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TradingFeeEvent {
  export type InputTuple = [
    _buyer: AddressLike,
    _seller: AddressLike,
    _team: AddressLike,
    _fee: BigNumberish
  ];
  export type OutputTuple = [
    _buyer: string,
    _seller: string,
    _team: string,
    _fee: bigint
  ];
  export interface OutputObject {
    _buyer: string;
    _seller: string;
    _team: string;
    _fee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferStakeEvent {
  export type InputTuple = [
    _from: AddressLike,
    _to: AddressLike,
    _amount: BigNumberish
  ];
  export type OutputTuple = [_from: string, _to: string, _amount: bigint];
  export interface OutputObject {
    _from: string;
    _to: string;
    _amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnStakeEvent {
  export type InputTuple = [_staker: AddressLike, _amount: BigNumberish];
  export type OutputTuple = [_staker: string, _amount: bigint];
  export interface OutputObject {
    _staker: string;
    _amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawEvent {
  export type InputTuple = [
    _owner: AddressLike,
    _blockNumber: BigNumberish,
    _cap: BigNumberish
  ];
  export type OutputTuple = [
    _owner: string,
    _blockNumber: bigint,
    _cap: bigint
  ];
  export interface OutputObject {
    _owner: string;
    _blockNumber: bigint;
    _cap: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawAfterResignEvent {
  export type InputTuple = [
    _staker: AddressLike,
    _isStakeLocked: boolean,
    _withdrawalCap: BigNumberish
  ];
  export type OutputTuple = [
    _staker: string,
    _isStakeLocked: boolean,
    _withdrawalCap: bigint
  ];
  export interface OutputObject {
    _staker: string;
    _isStakeLocked: boolean;
    _withdrawalCap: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawRewardEvent {
  export type InputTuple = [_staker: AddressLike, _reward: BigNumberish];
  export type OutputTuple = [_staker: string, _reward: bigint];
  export interface OutputObject {
    _staker: string;
    _reward: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawRewardPerEpochEvent {
  export type InputTuple = [
    _staker: AddressLike,
    _reward: BigNumberish,
    _epoch: BigNumberish
  ];
  export type OutputTuple = [_staker: string, _reward: bigint, _epoch: bigint];
  export interface OutputObject {
    _staker: string;
    _reward: bigint;
    _epoch: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface CandidateContract extends BaseContract {
  connect(runner?: ContractRunner | null): CandidateContract;
  waitForDeployment(): Promise<this>;

  interface: CandidateContractInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  BLOCK_PER_EPOCH: TypedContractMethod<[], [bigint], "view">;

  CandidateName: TypedContractMethod<[], [string], "view">;

  CapBeforeResign: TypedContractMethod<[], [bigint], "view">;

  EpochsAtWhichCapChange: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  EpochsReward: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [boolean, bigint, bigint] & {
        IsRewardPaid: boolean;
        rewards: bigint;
        actualRewards: bigint;
      }
    ],
    "view"
  >;

  ListStaker: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  NUM_EPOCH_UNDER60k_TO_RESIGN: TypedContractMethod<[], [bigint], "view">;

  PENDING_STATUS: TypedContractMethod<[], [bigint], "view">;

  PROPOSED_STATUS: TypedContractMethod<[], [bigint], "view">;

  RESIGNED_STATUS: TypedContractMethod<[], [bigint], "view">;

  RemainingStakeAfterResign: TypedContractMethod<[], [bigint], "view">;

  StakeExchange: TypedContractMethod<
    [arg0: AddressLike],
    [
      [boolean, bigint, bigint] & {
        isForSale: boolean;
        sellStakePrice: bigint;
        amountForSale: bigint;
      }
    ],
    "view"
  >;

  StakerRewardWithdrawState: TypedContractMethod<
    [arg0: AddressLike],
    [bigint],
    "view"
  >;

  StakersCapacity: TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [bigint],
    "view"
  >;

  StakersTotalReward: TypedContractMethod<
    [arg0: AddressLike],
    [bigint],
    "view"
  >;

  TotalRewardEpochFilled: TypedContractMethod<[], [bigint], "view">;

  TotalRewardWithdrawn: TypedContractMethod<[], [bigint], "view">;

  buyStake: TypedContractMethod<[_sellStaker: AddressLike], [void], "payable">;

  canResign: TypedContractMethod<[], [boolean], "view">;

  candidateStatus: TypedContractMethod<[], [bigint], "view">;

  candidateWithdrawDelay: TypedContractMethod<[], [bigint], "view">;

  capacity: TypedContractMethod<[], [bigint], "view">;

  capacityChanges: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  capacityHistory: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  coinbaseAddr: TypedContractMethod<[], [string], "view">;

  communityVote: TypedContractMethod<[support: boolean], [void], "nonpayable">;

  computeStakerRewardByEpoch: TypedContractMethod<
    [_staker: AddressLike, _epoch: BigNumberish],
    [[bigint, bigint]],
    "view"
  >;

  computeTotalStakerReward: TypedContractMethod<
    [_staker: AddressLike],
    [bigint],
    "view"
  >;

  confirmTeam: TypedContractMethod<[], [void], "nonpayable">;

  currentEpoch: TypedContractMethod<[], [bigint], "view">;

  fillRewardsPerEpoch: TypedContractMethod<[], [void], "nonpayable">;

  getCapacityByEpoch: TypedContractMethod<
    [epoch: BigNumberish],
    [bigint],
    "view"
  >;

  getCurrentStakerCap: TypedContractMethod<
    [staker: AddressLike],
    [bigint],
    "view"
  >;

  getHardwareFee: TypedContractMethod<
    [_reward: BigNumberish],
    [bigint],
    "view"
  >;

  getHardwareFeePercentage: TypedContractMethod<[], [bigint], "view">;

  getLastWithdrawEpochOfStaker: TypedContractMethod<
    [_staker: AddressLike],
    [bigint],
    "view"
  >;

  getListStaker: TypedContractMethod<[], [string[]], "view">;

  getRefBonus: TypedContractMethod<[_reward: BigNumberish], [bigint], "view">;

  getRefBonusPercentage: TypedContractMethod<[], [bigint], "view">;

  getReferralAddress: TypedContractMethod<[], [string], "view">;

  getRewardByEpoch: TypedContractMethod<
    [_staker: AddressLike, _epoch: BigNumberish],
    [bigint],
    "view"
  >;

  getStakeExchange: TypedContractMethod<
    [_addr: AddressLike],
    [[boolean, bigint, bigint]],
    "view"
  >;

  getStakerCapacityByEpoch: TypedContractMethod<
    [epoch: BigNumberish, addr: AddressLike],
    [bigint],
    "view"
  >;

  getStakerCurrentReward: TypedContractMethod<
    [_staker: AddressLike],
    [bigint],
    "view"
  >;

  getStakerTotalReward: TypedContractMethod<
    [_staker: AddressLike],
    [bigint],
    "view"
  >;

  getWithdrawBlockNumbers: TypedContractMethod<
    [_staker: AddressLike],
    [bigint[]],
    "view"
  >;

  getWithdrawCap: TypedContractMethod<
    [_staker: AddressLike, _blockNumber: BigNumberish],
    [bigint],
    "view"
  >;

  governance: TypedContractMethod<
    [],
    [
      [string, bigint, bigint] & {
        description: string;
        supportCap: bigint;
        epochStart: bigint;
      }
    ],
    "view"
  >;

  hardwareFeePercentage: TypedContractMethod<[], [bigint], "view">;

  indexes: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  isAlreadyWithdrawAfterResign: TypedContractMethod<
    [_staker: AddressLike, checkStakeLock: boolean],
    [boolean],
    "view"
  >;

  isCandidateLockWithdraw: TypedContractMethod<[], [boolean], "view">;

  isRequireReferralLock: TypedContractMethod<[], [boolean], "view">;

  isStakeLockWithdrawn: TypedContractMethod<[], [boolean], "view">;

  isVoted: TypedContractMethod<[_staker: AddressLike], [boolean], "view">;

  isWithdrawAfterResignAvailable: TypedContractMethod<
    [_staker: AddressLike, checkStakeLock: boolean],
    [boolean],
    "view"
  >;

  isWithdrawn: TypedContractMethod<
    [_blockNumber: BigNumberish],
    [boolean],
    "view"
  >;

  lastEpochRewardFilled: TypedContractMethod<[], [bigint], "view">;

  maxCap: TypedContractMethod<[], [bigint], "view">;

  propose: TypedContractMethod<[], [void], "nonpayable">;

  referralAddress: TypedContractMethod<[], [string], "view">;

  referralPercentage: TypedContractMethod<[], [bigint], "view">;

  requireLockAmount: TypedContractMethod<[], [bigint], "view">;

  resign: TypedContractMethod<[], [void], "nonpayable">;

  resignByTeam: TypedContractMethod<[], [void], "nonpayable">;

  saveCapacityHistory: TypedContractMethod<[], [void], "nonpayable">;

  setHardwareFeePercentage: TypedContractMethod<
    [_hardwareFee: BigNumberish],
    [void],
    "nonpayable"
  >;

  setLastWithdrawEpochOfStaker: TypedContractMethod<
    [_staker: AddressLike, _epochNumber: BigNumberish],
    [void],
    "nonpayable"
  >;

  setMaxCap: TypedContractMethod<[_maxCap: BigNumberish], [void], "nonpayable">;

  setRefBonusPercentage: TypedContractMethod<
    [_bonus: BigNumberish],
    [void],
    "nonpayable"
  >;

  setReferralAddress: TypedContractMethod<
    [_r: AddressLike],
    [void],
    "nonpayable"
  >;

  setRequireLockAmount: TypedContractMethod<
    [_amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  setRequireReferralLock: TypedContractMethod<
    [_lock: boolean],
    [void],
    "nonpayable"
  >;

  setSellStake: TypedContractMethod<
    [_amount: BigNumberish, _price: BigNumberish],
    [void],
    "nonpayable"
  >;

  setTeam: TypedContractMethod<[_team: AddressLike], [void], "nonpayable">;

  setWithdrawDelay: TypedContractMethod<
    [_stake: BigNumberish, _candidate: BigNumberish],
    [void],
    "nonpayable"
  >;

  stake: TypedContractMethod<[], [void], "payable">;

  stakerWithdrawDelay: TypedContractMethod<[], [bigint], "view">;

  teamAddr: TypedContractMethod<[], [string], "view">;

  teamAddress: TypedContractMethod<[], [string], "view">;

  transferStake: TypedContractMethod<
    [to: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  unstake: TypedContractMethod<[_amount: BigNumberish], [void], "nonpayable">;

  validator: TypedContractMethod<[], [string], "view">;

  withdrawAfterResign: TypedContractMethod<
    [_staker: AddressLike, checkStakeLock: boolean],
    [void],
    "nonpayable"
  >;

  withdrawAllRewardsOfStaker: TypedContractMethod<
    [_staker: AddressLike],
    [void],
    "nonpayable"
  >;

  withdrawIndex: TypedContractMethod<[], [bigint], "view">;

  withdrawRewardStakerOneEpoch: TypedContractMethod<
    [_staker: AddressLike],
    [void],
    "nonpayable"
  >;

  withdrawRewardStakerOneHundredEpoch: TypedContractMethod<
    [_staker: AddressLike],
    [void],
    "nonpayable"
  >;

  withdrawStake: TypedContractMethod<
    [_blockNumber: BigNumberish],
    [void],
    "nonpayable"
  >;

  withdrawStakeByAnyOne: TypedContractMethod<
    [_staker: AddressLike, _blockNumber: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "BLOCK_PER_EPOCH"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "CandidateName"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "CapBeforeResign"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "EpochsAtWhichCapChange"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "EpochsReward"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [boolean, bigint, bigint] & {
        IsRewardPaid: boolean;
        rewards: bigint;
        actualRewards: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "ListStaker"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "NUM_EPOCH_UNDER60k_TO_RESIGN"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "PENDING_STATUS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "PROPOSED_STATUS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "RESIGNED_STATUS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "RemainingStakeAfterResign"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "StakeExchange"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [boolean, bigint, bigint] & {
        isForSale: boolean;
        sellStakePrice: bigint;
        amountForSale: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "StakerRewardWithdrawState"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "StakersCapacity"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "StakersTotalReward"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "TotalRewardEpochFilled"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "TotalRewardWithdrawn"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "buyStake"
  ): TypedContractMethod<[_sellStaker: AddressLike], [void], "payable">;
  getFunction(
    nameOrSignature: "canResign"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "candidateStatus"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "candidateWithdrawDelay"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "capacity"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "capacityChanges"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "capacityHistory"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "coinbaseAddr"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "communityVote"
  ): TypedContractMethod<[support: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "computeStakerRewardByEpoch"
  ): TypedContractMethod<
    [_staker: AddressLike, _epoch: BigNumberish],
    [[bigint, bigint]],
    "view"
  >;
  getFunction(
    nameOrSignature: "computeTotalStakerReward"
  ): TypedContractMethod<[_staker: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "confirmTeam"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "currentEpoch"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "fillRewardsPerEpoch"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getCapacityByEpoch"
  ): TypedContractMethod<[epoch: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getCurrentStakerCap"
  ): TypedContractMethod<[staker: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getHardwareFee"
  ): TypedContractMethod<[_reward: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getHardwareFeePercentage"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getLastWithdrawEpochOfStaker"
  ): TypedContractMethod<[_staker: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getListStaker"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getRefBonus"
  ): TypedContractMethod<[_reward: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getRefBonusPercentage"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getReferralAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getRewardByEpoch"
  ): TypedContractMethod<
    [_staker: AddressLike, _epoch: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getStakeExchange"
  ): TypedContractMethod<
    [_addr: AddressLike],
    [[boolean, bigint, bigint]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getStakerCapacityByEpoch"
  ): TypedContractMethod<
    [epoch: BigNumberish, addr: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getStakerCurrentReward"
  ): TypedContractMethod<[_staker: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getStakerTotalReward"
  ): TypedContractMethod<[_staker: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getWithdrawBlockNumbers"
  ): TypedContractMethod<[_staker: AddressLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getWithdrawCap"
  ): TypedContractMethod<
    [_staker: AddressLike, _blockNumber: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "governance"
  ): TypedContractMethod<
    [],
    [
      [string, bigint, bigint] & {
        description: string;
        supportCap: bigint;
        epochStart: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "hardwareFeePercentage"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "indexes"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "isAlreadyWithdrawAfterResign"
  ): TypedContractMethod<
    [_staker: AddressLike, checkStakeLock: boolean],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isCandidateLockWithdraw"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "isRequireReferralLock"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "isStakeLockWithdrawn"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "isVoted"
  ): TypedContractMethod<[_staker: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isWithdrawAfterResignAvailable"
  ): TypedContractMethod<
    [_staker: AddressLike, checkStakeLock: boolean],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isWithdrawn"
  ): TypedContractMethod<[_blockNumber: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "lastEpochRewardFilled"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "maxCap"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "propose"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "referralAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "referralPercentage"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "requireLockAmount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "resign"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "resignByTeam"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "saveCapacityHistory"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setHardwareFeePercentage"
  ): TypedContractMethod<[_hardwareFee: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setLastWithdrawEpochOfStaker"
  ): TypedContractMethod<
    [_staker: AddressLike, _epochNumber: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setMaxCap"
  ): TypedContractMethod<[_maxCap: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setRefBonusPercentage"
  ): TypedContractMethod<[_bonus: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setReferralAddress"
  ): TypedContractMethod<[_r: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setRequireLockAmount"
  ): TypedContractMethod<[_amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setRequireReferralLock"
  ): TypedContractMethod<[_lock: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setSellStake"
  ): TypedContractMethod<
    [_amount: BigNumberish, _price: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setTeam"
  ): TypedContractMethod<[_team: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setWithdrawDelay"
  ): TypedContractMethod<
    [_stake: BigNumberish, _candidate: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "stake"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "stakerWithdrawDelay"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "teamAddr"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "teamAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "transferStake"
  ): TypedContractMethod<
    [to: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "unstake"
  ): TypedContractMethod<[_amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "validator"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "withdrawAfterResign"
  ): TypedContractMethod<
    [_staker: AddressLike, checkStakeLock: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdrawAllRewardsOfStaker"
  ): TypedContractMethod<[_staker: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawIndex"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "withdrawRewardStakerOneEpoch"
  ): TypedContractMethod<[_staker: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawRewardStakerOneHundredEpoch"
  ): TypedContractMethod<[_staker: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawStake"
  ): TypedContractMethod<[_blockNumber: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawStakeByAnyOne"
  ): TypedContractMethod<
    [_staker: AddressLike, _blockNumber: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "BuyStake"
  ): TypedContractEvent<
    BuyStakeEvent.InputTuple,
    BuyStakeEvent.OutputTuple,
    BuyStakeEvent.OutputObject
  >;
  getEvent(
    key: "CommunityVote"
  ): TypedContractEvent<
    CommunityVoteEvent.InputTuple,
    CommunityVoteEvent.OutputTuple,
    CommunityVoteEvent.OutputObject
  >;
  getEvent(
    key: "PaymentHardware"
  ): TypedContractEvent<
    PaymentHardwareEvent.InputTuple,
    PaymentHardwareEvent.OutputTuple,
    PaymentHardwareEvent.OutputObject
  >;
  getEvent(
    key: "PaymentRef"
  ): TypedContractEvent<
    PaymentRefEvent.InputTuple,
    PaymentRefEvent.OutputTuple,
    PaymentRefEvent.OutputObject
  >;
  getEvent(
    key: "Propose"
  ): TypedContractEvent<
    ProposeEvent.InputTuple,
    ProposeEvent.OutputTuple,
    ProposeEvent.OutputObject
  >;
  getEvent(
    key: "Resign"
  ): TypedContractEvent<
    ResignEvent.InputTuple,
    ResignEvent.OutputTuple,
    ResignEvent.OutputObject
  >;
  getEvent(
    key: "SaveCapacityByEpoch"
  ): TypedContractEvent<
    SaveCapacityByEpochEvent.InputTuple,
    SaveCapacityByEpochEvent.OutputTuple,
    SaveCapacityByEpochEvent.OutputObject
  >;
  getEvent(
    key: "SetSellStake"
  ): TypedContractEvent<
    SetSellStakeEvent.InputTuple,
    SetSellStakeEvent.OutputTuple,
    SetSellStakeEvent.OutputObject
  >;
  getEvent(
    key: "Stake"
  ): TypedContractEvent<
    StakeEvent.InputTuple,
    StakeEvent.OutputTuple,
    StakeEvent.OutputObject
  >;
  getEvent(
    key: "TradingFee"
  ): TypedContractEvent<
    TradingFeeEvent.InputTuple,
    TradingFeeEvent.OutputTuple,
    TradingFeeEvent.OutputObject
  >;
  getEvent(
    key: "TransferStake"
  ): TypedContractEvent<
    TransferStakeEvent.InputTuple,
    TransferStakeEvent.OutputTuple,
    TransferStakeEvent.OutputObject
  >;
  getEvent(
    key: "UnStake"
  ): TypedContractEvent<
    UnStakeEvent.InputTuple,
    UnStakeEvent.OutputTuple,
    UnStakeEvent.OutputObject
  >;
  getEvent(
    key: "Withdraw"
  ): TypedContractEvent<
    WithdrawEvent.InputTuple,
    WithdrawEvent.OutputTuple,
    WithdrawEvent.OutputObject
  >;
  getEvent(
    key: "WithdrawAfterResign"
  ): TypedContractEvent<
    WithdrawAfterResignEvent.InputTuple,
    WithdrawAfterResignEvent.OutputTuple,
    WithdrawAfterResignEvent.OutputObject
  >;
  getEvent(
    key: "WithdrawReward"
  ): TypedContractEvent<
    WithdrawRewardEvent.InputTuple,
    WithdrawRewardEvent.OutputTuple,
    WithdrawRewardEvent.OutputObject
  >;
  getEvent(
    key: "WithdrawRewardPerEpoch"
  ): TypedContractEvent<
    WithdrawRewardPerEpochEvent.InputTuple,
    WithdrawRewardPerEpochEvent.OutputTuple,
    WithdrawRewardPerEpochEvent.OutputObject
  >;

  filters: {
    "BuyStake(address,uint256,address,uint256,uint256)": TypedContractEvent<
      BuyStakeEvent.InputTuple,
      BuyStakeEvent.OutputTuple,
      BuyStakeEvent.OutputObject
    >;
    BuyStake: TypedContractEvent<
      BuyStakeEvent.InputTuple,
      BuyStakeEvent.OutputTuple,
      BuyStakeEvent.OutputObject
    >;

    "CommunityVote(address,uint256,string,uint256,bool)": TypedContractEvent<
      CommunityVoteEvent.InputTuple,
      CommunityVoteEvent.OutputTuple,
      CommunityVoteEvent.OutputObject
    >;
    CommunityVote: TypedContractEvent<
      CommunityVoteEvent.InputTuple,
      CommunityVoteEvent.OutputTuple,
      CommunityVoteEvent.OutputObject
    >;

    "PaymentHardware(uint256,uint256,uint256)": TypedContractEvent<
      PaymentHardwareEvent.InputTuple,
      PaymentHardwareEvent.OutputTuple,
      PaymentHardwareEvent.OutputObject
    >;
    PaymentHardware: TypedContractEvent<
      PaymentHardwareEvent.InputTuple,
      PaymentHardwareEvent.OutputTuple,
      PaymentHardwareEvent.OutputObject
    >;

    "PaymentRef(uint256,uint256,uint256)": TypedContractEvent<
      PaymentRefEvent.InputTuple,
      PaymentRefEvent.OutputTuple,
      PaymentRefEvent.OutputObject
    >;
    PaymentRef: TypedContractEvent<
      PaymentRefEvent.InputTuple,
      PaymentRefEvent.OutputTuple,
      PaymentRefEvent.OutputObject
    >;

    "Propose(address)": TypedContractEvent<
      ProposeEvent.InputTuple,
      ProposeEvent.OutputTuple,
      ProposeEvent.OutputObject
    >;
    Propose: TypedContractEvent<
      ProposeEvent.InputTuple,
      ProposeEvent.OutputTuple,
      ProposeEvent.OutputObject
    >;

    "Resign(address)": TypedContractEvent<
      ResignEvent.InputTuple,
      ResignEvent.OutputTuple,
      ResignEvent.OutputObject
    >;
    Resign: TypedContractEvent<
      ResignEvent.InputTuple,
      ResignEvent.OutputTuple,
      ResignEvent.OutputObject
    >;

    "SaveCapacityByEpoch(uint256,uint256,uint256)": TypedContractEvent<
      SaveCapacityByEpochEvent.InputTuple,
      SaveCapacityByEpochEvent.OutputTuple,
      SaveCapacityByEpochEvent.OutputObject
    >;
    SaveCapacityByEpoch: TypedContractEvent<
      SaveCapacityByEpochEvent.InputTuple,
      SaveCapacityByEpochEvent.OutputTuple,
      SaveCapacityByEpochEvent.OutputObject
    >;

    "SetSellStake(address,uint256,uint256)": TypedContractEvent<
      SetSellStakeEvent.InputTuple,
      SetSellStakeEvent.OutputTuple,
      SetSellStakeEvent.OutputObject
    >;
    SetSellStake: TypedContractEvent<
      SetSellStakeEvent.InputTuple,
      SetSellStakeEvent.OutputTuple,
      SetSellStakeEvent.OutputObject
    >;

    "Stake(address,uint256)": TypedContractEvent<
      StakeEvent.InputTuple,
      StakeEvent.OutputTuple,
      StakeEvent.OutputObject
    >;
    Stake: TypedContractEvent<
      StakeEvent.InputTuple,
      StakeEvent.OutputTuple,
      StakeEvent.OutputObject
    >;

    "TradingFee(address,address,address,uint256)": TypedContractEvent<
      TradingFeeEvent.InputTuple,
      TradingFeeEvent.OutputTuple,
      TradingFeeEvent.OutputObject
    >;
    TradingFee: TypedContractEvent<
      TradingFeeEvent.InputTuple,
      TradingFeeEvent.OutputTuple,
      TradingFeeEvent.OutputObject
    >;

    "TransferStake(address,address,uint256)": TypedContractEvent<
      TransferStakeEvent.InputTuple,
      TransferStakeEvent.OutputTuple,
      TransferStakeEvent.OutputObject
    >;
    TransferStake: TypedContractEvent<
      TransferStakeEvent.InputTuple,
      TransferStakeEvent.OutputTuple,
      TransferStakeEvent.OutputObject
    >;

    "UnStake(address,uint256)": TypedContractEvent<
      UnStakeEvent.InputTuple,
      UnStakeEvent.OutputTuple,
      UnStakeEvent.OutputObject
    >;
    UnStake: TypedContractEvent<
      UnStakeEvent.InputTuple,
      UnStakeEvent.OutputTuple,
      UnStakeEvent.OutputObject
    >;

    "Withdraw(address,uint256,uint256)": TypedContractEvent<
      WithdrawEvent.InputTuple,
      WithdrawEvent.OutputTuple,
      WithdrawEvent.OutputObject
    >;
    Withdraw: TypedContractEvent<
      WithdrawEvent.InputTuple,
      WithdrawEvent.OutputTuple,
      WithdrawEvent.OutputObject
    >;

    "WithdrawAfterResign(address,bool,uint256)": TypedContractEvent<
      WithdrawAfterResignEvent.InputTuple,
      WithdrawAfterResignEvent.OutputTuple,
      WithdrawAfterResignEvent.OutputObject
    >;
    WithdrawAfterResign: TypedContractEvent<
      WithdrawAfterResignEvent.InputTuple,
      WithdrawAfterResignEvent.OutputTuple,
      WithdrawAfterResignEvent.OutputObject
    >;

    "WithdrawReward(address,uint256)": TypedContractEvent<
      WithdrawRewardEvent.InputTuple,
      WithdrawRewardEvent.OutputTuple,
      WithdrawRewardEvent.OutputObject
    >;
    WithdrawReward: TypedContractEvent<
      WithdrawRewardEvent.InputTuple,
      WithdrawRewardEvent.OutputTuple,
      WithdrawRewardEvent.OutputObject
    >;

    "WithdrawRewardPerEpoch(address,uint256,uint256)": TypedContractEvent<
      WithdrawRewardPerEpochEvent.InputTuple,
      WithdrawRewardPerEpochEvent.OutputTuple,
      WithdrawRewardPerEpochEvent.OutputObject
    >;
    WithdrawRewardPerEpoch: TypedContractEvent<
      WithdrawRewardPerEpochEvent.InputTuple,
      WithdrawRewardPerEpochEvent.OutputTuple,
      WithdrawRewardPerEpochEvent.OutputObject
    >;
  };
}
